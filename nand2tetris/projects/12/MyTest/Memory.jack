// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;
    static Array block;

    /** Initializes the class. */
    function void init() {
        let block = -1;
        let ram = 0;
        let heap = 2048;  // heapBase
        let freeList = 2048;
        let heap[0] = 0;  // next
        let heap[1] = 14335;  // length

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array currList;
        let currList = freeList;

        while (currList[1] < (size + 2)) {
            let currList = currList[0];
        }

        let currList[1] = currList[1] - (size + 2);
        let block = (currList + currList[1]) + 1;

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array temp;
        let temp = freeList;
        let freeList = o;
        let freeList[0] = temp;
        return;
    }  

}
